A
# 2.2.) Reorganize matrix such that zero vectors are at the bottom, rm parallel vectors
A = swap_Zero_Vectors(A)
A = remove_Parallel_Vectors(A)
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
A2 = A
A2
A
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# 2.1.) Check if column are all 0 except for the row with the pivot
if (!col_Is_All_Zero(A,currentCol = col)){
# find nonzero elements in col. vector
idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
# Perform Elementary Row OPs
A = gaussian_Elimination(A,idxNonzero,col)
}
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
# 2.1.) Check if column are all 0 except for the row with the pivot
if (!col_Is_All_Zero(A,currentCol = col)){
# find nonzero elements in col. vector
idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
# Perform Elementary Row OPs
A = gaussian_Elimination(A,idxNonzero,col)
}
}
}
A = A2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# 2.1.) Check if column are all 0 except for the row with the pivot
if (!col_Is_All_Zero(A,currentCol = col)){
# find nonzero elements in col. vector
idxNonzero = which(A[-c(1:currentRow),col]!=0) + col
# Perform Elementary Row OPs
A = gaussian_Elimination(A,idxNonzero,col)
}
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# 2.1.) Check if column are all 0 except for the row with the pivot
if (!col_Is_All_Zero(A,currentCol = col)){
# find nonzero elements in col. vector
idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
# Perform Elementary Row OPs
A = gaussian_Elimination(A,idxNonzero,col)
}
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:currentRow),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
# prep next it
currentRow = currentRow + 1
}
}
A
A <- t(matrix(c(2,2,2,
4,4,4,
6,6,6,
0,1,7), nrow = 3))
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:currentRow),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
A
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:currentRow),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading ones, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow+1,] = (1/A[currentRow+1,col]) * A[currentRow+1,]
currentRow = currentRow + 1
# 2.1.) Check if column are all 0 except for the row with the pivot
if (!col_Is_All_Zero(A,currentCol = col)){
# find nonzero elements in col. vector
idxNonzero = which(A[-c(1:currentRow),col]!=0) + col
# Perform Elementary Row OPs
A = gaussian_Elimination(A,idxNonzero,col)
}
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# # 2.1.) Check if column are all 0 except for the row with the pivot
# if (!col_Is_All_Zero(A,currentCol = col)){
#
#   # find nonzero elements in col. vector
#   idxNonzero = which(A[-c(1:idxPivot),col]!=0) + col
#
#   # Perform Elementary Row OPs
#   A = gaussian_Elimination(A,idxNonzero,col)
# }
# prep next it
currentRow = currentRow + 1
}
}
A
# detect pivots
for (row in 1:nr){
print(row)
}
# detect pivots
find_Zero_Vectors(A)
# detect pivots
nrTest = nrow(A[-find_Zero_Vectors(A),])
for (row in 1:nrTest){
print(row)
}
upper.tri(A)
A
# detect pivots
A_test = A[-find_Zero_Vectors(A),]
A_tes
A_test
A_test == 0
diag(nrTest)
# detect pivots
A_test = A[-find_Zero_Vectors(A),]
nrTest = nrow(A_test)
if (all(diag(A_test) == 1)){
# return
diag(nrTest)
}
for (row in 1:nrTest){
for (col in 1:nc){
if(A_test[row,col] =! 1)
if (row == col){
message("Failed Test")
}
next
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if(A_test[row,col] =! 1){
if (row == col){
message("Failed Test")
}
next
}
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if(A_test[row,col] =! 1){
if (col == nc){
message("Failed Test")
}
next
}
}
}
for (row in 1:nrTest){
for (col in 1:nc){
# if(A_test[row,col] =! 1){
#   if (col == nc){
#     message("Failed Test")
#   }
#   next
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if(A_test[row,col] =! 1){
# if (col == nc){
#   message("Failed Test")
# }
next
}
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if(A_test[row,col] =! 1){
message("J")
}
}
}
A_test[row,col] =! 1
for (row in 1:nrTest){
for (col in 1:nc){
print(row)
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if (A_test[row, col] != 1){
message("Not 1")
}
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if (A_test[row, col] != 1){
if (col == nc){
message("Failed")
}
}
}
}
for (row in 1:nrTest){
for (col in 1:nc){
if (A_test[row, col] != 1){
if (col == nc & row != nc){
message("Failed")
}
}
}
}
print(A_test[row,])
for (row in 1:nrTest){
print(A_test[row,])
}
which(A_test[row,] == 1)
for (row in 1:nrTest){
print(A_test[row,])
which(A_test[row,] == 1)
}
for (row in 1:nrTest){
print(A_test[row,])
print(which(A_test[row,] == 1))
}
for (row in 1:nrTest){
print(A_test[row,])
which(A_test[row,] == 1)
which(abs(A_test[row,]) > 0 & A_test[row,] != 1)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,]) > 0 & A_test[row,] != 1)
min(pivot) > min(other)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,]) > 0 & A_test[row,] != 1)
print(other)
min(pivot) > min(other)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,] - 1) > 0)
print(other)
min(pivot) > min(other)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,] - 1) > 0)
if (length(other) == 0){
next
}
min(pivot) > min(other)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,] - 1) > 0)
print(pivot)
if (length(other) == 0){
next
}
min(pivot) > min(other)
}
A_test
A
# detect pivots
A_test = A[-find_Zero_Vectors(A),]
A_test
if (all(diag(A_test) == 1)){
# return
diag(nrTest)
}
A_test
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
other = which(abs(A_test[row,] - 1) > 0)
print(pivot)
if (length(other) == 0){
next
}
min(pivot) > min(other)
}
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
if (length(pivot) == 0){
message("Failed")
}
other = which(abs(A_test[row,] - 1) > 0)
if (length(other) == 0){
next
}
if (min(other) > min(pivot)){
message("Failed")
}
}
A_test <- t(matrix(c(0,1,1,
0,1,1,
0,0,1), nrow = 3))
for (row in 1:nrTest){
print(A_test[row,])
pivot = which(A_test[row,] == 1)
if (length(pivot) == 0){
message("Failed")
}
other = which(abs(A_test[row,] - 1) > 0)
if (length(other) == 0){
next
}
if (min(other) > min(pivot)){
message("Failed")
}
}
for (col in 1:nc){
print(A[,col] == c(1, rep(0,nrTest)))
}
c(1, rep(0,nrTest)))
c(1, rep(0,nrTest))
A[,1]
A_test[,1]
c(1, rep(0,nrTest))
A_test[,1]
c(1, rep(0,nrTest-1))
A_test[,1]
A_test[,1]
A_test
# detect pivots
A_test = A[-find_Zero_Vectors(A),]
nrTest = nrow(A_test)
if (all(diag(A_test) == 1)){
# return
diag(nrTest)
}
c(1, rep(0,nrTest-1))
A_test[,1]
