8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
submatrix2=subMatrix
submatrix2
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
submatrix2
cnt == ncol(all_combos)
subMatrix=subMatrix
det(subMatrix) == 0
det(subMatrix) == 0)
subMatrix
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
submatrix2=subMatrix
submatrix2
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
submatrix = submatrix2
submatrix
cnt == ncol(all_combos)
det(subMatrix) == 0
submatrix
det(submatrix)
subMatrix = submatrix2
subMatrix
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
subMatrix
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix = submatrix2
subMatrix
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
if (ncol(submatrix) == 2){
print("dim 1")
break
}
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
rmd = sample(1:nrow(subMatrix), maxRank - 1)
maxRank
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
submatrix2=subMatrix
subMatrix = submatrix2
rmd = sample(1:nrow(subMatrix), maxRank - 1)
rmd
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
subMatrix
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
subMatrix
subMatrix = submatrix2
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
subMatrix = submatrix2
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
subMatrix = submatrix2
subMatrix
rmd = sample(1:nrow(subMatrix), maxRank - 1)
1:nrow(subMatrix)
maxRank - 1
maxRank
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
submatrix2=subMatrix
subMatrix = submatrix2
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
subMatrix = submatrix2
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
subMatrix = submatrix2
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
subMatrix
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
submatrix2=subMatrix
subMatrix = submatrix2
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
if (exists("subsubmatrix")){
rmd = sample(1:nrow(subsubmatrix), maxRank - 1)
subMatrix = subsubmatrix[rmd,rmd]
} else {
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
}
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
A <- t(matrix(c(2,2,2,
4,4,4,
6,6,6,
0,1,7), nrow = 3))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
submatrix2=subMatrix
subMatrix = submatrix2
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
if (exists("subsubmatrix")){
rmd = sample(1:nrow(subsubmatrix), maxRank - 1)
subMatrix = subsubmatrix[rmd,rmd]
} else {
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
}
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
if (exists("subsubmatrix")){
rmd = sample(1:nrow(subsubmatrix), maxRank - 1)
subMatrix = subsubmatrix[rmd,rmd]
} else {
rmd = sample(1:nrow(subMatrix), maxRank - 1)
subMatrix = subMatrix[rmd,rmd]
}
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
A <- t(matrix(c(2,2,2,2,
4,4,4,4,
6,6,6,6,
8,8,8,8,
0,1,7,-1), nrow = 4))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
maxRank
if (cnt == ncol(all_combos)){
while(det(subMatrix) == 0){
if (exists("subsubmatrix")){
rmd = sort(sample(1:nrow(subsubmatrix), maxRank - 1))
subMatrix = subsubmatrix[rmd,rmd]
} else {
rmd = sort(sample(1:nrow(subMatrix), maxRank - 1))
subMatrix = subMatrix[rmd,rmd]
}
nc = ncol(subMatrix)
nr = nrow(subMatrix)
maxRank = min(nc,nr)
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subsubMatrix = subMatrix[all_combos[,combo],]
if(det(subsubMatrix) != 0){
break
}
cnt = cnt + 1
}
}
}
subMatrix
rmd
A[rmd,]
A[rmd,rmd]
A[rmd-1,rmd-1]
subMatrix
subMatrix
A
rmd
sumMatrix[rmd,rmd]
subMatrix[rmd,rmd]
subMatrix
subsubMatrix[rmd,rmd]
A <- t(matrix(c(2,2,2,
4,4,4,
6,6,6,
0,1,7), nrow = 3))
nc = ncol(A)
nr = nrow(A)
# lin dep vectors must span the smaller of the row or column space of A
maxRank = min(nc,nr)
if (nc > nr){
A = t(A)
}
all_combos = combn(1:nr,maxRank)
cnt = 0
for (combo in 1:ncol(all_combos)){
subMatrix = A[all_combos[,combo],]
if(det(subMatrix) != 0){
break
}
cnt = cnt + 1
}
all_combos[,combo]
A[all_combos[,combo],]
subsubMatrix
