for (col in currentCol:nc){
# skip if zero vector
if (all(A[col,] == 0)){
next
}
print(col)
idxPivot = which(A[-c(1:col-1),col] == 1)[1]
print(A[-c(1:col-1),col])
# if no leading 1s, create one
if (is.na(idxPivot)){
# if column is all zero
if (all(A[-c(1:col-1),col] == 0)){
colcol = which(A[col,] != 0)[1]
A[colcol,] = (1/A[colcol,colcol]) * A[colcol,]
next
} else {
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
next
}
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,nextPivot)
# prep next it
nextPivot = nextPivot + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = currentCol + 1
currentCol = 2
# iterate through columns and find leading zeros or create them
for (col in currentCol:nc){
# skip if zero vector
if (all(A[col,] == 0)){
next
}
print(col)
idxPivot = which(A[-c(1:col-1),col] == 1)[1]
print(A[-c(1:col-1),col])
# if no leading 1s, create one
if (is.na(idxPivot)){
# if column is all zero
if (all(A[-c(1:col-1),col] == 0)){
colcol = which(A[col,] != 0)[1]
A[colcol,] = (1/A[colcol,colcol]) * A[colcol,]
next
} else {
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
next
}
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,nextPivot)
# prep next it
nextPivot = nextPivot + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = currentCol + 1
currentCol = 2
# iterate through columns and find leading zeros or create them
for (col in currentCol:nc){
# skip if zero vector
if (all(A[col,] == 0)){
next
}
print("col ",col)
idxPivot = which(A[-c(1:col-1),col] == 1)[1]
print(A[-c(1:col-1),col])
# if no leading 1s, create one
if (is.na(idxPivot)){
# if column is all zero
if (all(A[-c(1:col-1),col] == 0)){
colcol = which(A[col,] != 0)[1]
A[colcol,] = (1/A[colcol,colcol]) * A[colcol,]
next
} else {
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
next
}
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,nextPivot)
# prep next it
nextPivot = nextPivot + 1
}
}
A
A2
A[-c(1:currentCol),]
A[-c(1:currentCol-1),]
A = A2
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = currentCol + 1
currentCol = 2
A[-c(1:currentCol-1),]
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:col-1),col] == 0)){
next
}
idxPivot = which(A[-c(1:col-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,nextPivot)
# prep next it
nextPivot = nextPivot + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:col-1),col] == 0)){
next
}
idxPivot = which(A[-c(1:col-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
next
}
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
next
}
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[col,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
print(A[-c(1:currentRow-1),col])
next
}
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
print(A[-c(1:currentRow-1),col])
next
}
print("not col of zeros")
print(A[-c(1:currentRow-1),col])
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
print(A[-c(1:currentRow-1),col])
next
}
print("not col of zeros")
print("col" + col)
print(A[-c(1:currentRow-1),col])
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
print(A[-c(1:currentRow-1),col])
next
}
print("not col of zeros")
print("col", col)
print(A[-c(1:currentRow-1),col])
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
print(A[-c(1:currentRow-1),col])
next
}
print("not col of zeros")
message("col", col)
print(A[-c(1:currentRow-1),col])
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 2
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow-1),col] == 0)){
print("col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow-1),col])
next
}
print("not col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow-1),col])
idxPivot = which(A[-c(1:currentRow-1),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
print("col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
next
}
print("not col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[col,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
print("col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
next
}
print("not col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
A2
A = A2
# 3.) find potential next pivots and swap rows if exist
nextPivot = 2
currentCol = 2
currentRow = 1
# make loop easier
for (col in currentCol:nc){
# skip if col is zero
if (all(A[-c(1:currentRow),col] == 0)){
print("col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
next
}
print("not col of zeros")
message("col ", col)
message("row ", row)
print(A[-c(1:currentRow),col])
idxPivot = which(A[-c(1:currentRow),col] == 1)[1]
# if no leading 1s, create one
if (is.na(idxPivot)){
# if leading one does not exist, create one
A[currentRow,] = (1/A[currentRow,col]) * A[col,]
currentRow = currentRow + 1
next
}
# if a leading one exists, swap and continue
if (all(A[idxPivot,1:col-1] == 0)){
# swap
A <- swap(A,idxPivot,currentRow)
# prep next it
currentRow = currentRow + 1
}
}
A
