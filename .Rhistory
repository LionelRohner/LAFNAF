G <- generalized_Inverse(A)
Check_Penrose_Cond(G, all_Penrose_check = T)
G%*%A%*%G
round(G%*%A%*%G)
round(G)
round(G)
round(G%*%A%*%G)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == round(A))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == round(G))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
Check_Penrose_Cond <- function(G, all_Penrose_check = F){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == round(A))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == round(G))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
round(G)
round(G%*%A%*%G)
Check_Penrose_Cond(G, all_Penrose_check = T)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
Check_Penrose_Cond <- function(G, all_Penrose_check = F){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == round(A))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == round(G))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(G, all_Penrose_check = T)
round(G%*%A%*%G) == G
G <- generalized_Inverse(A)
Check_Penrose_Cond(G, all_Penrose_check = T)
round(G%*%A%*%G) == G
G%*%A%*%G == G
round(G%*%A%*%G,2)
round(G%*%A%*%G,2) == round(G,2)
Check_Penrose_Cond <- function(G, all_Penrose_check = F){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == round(A))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == round(G))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(A,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == round(A))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == round(G))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(G, all_Penrose_check = T)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(A,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == G)
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G) == G)
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A,digits = digits) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == G)
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G,digits = digits) == t(round(A%*%G,digits = digits)))
message("AG = (AM)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A,digits = digits) == t(round(G%*%A,digits = digits)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A,digits = digits) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == G)
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G,digits = digits) == t(round(A%*%G,digits = digits)))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A,digits = digits) == t(round(G%*%A,digits = digits)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A,digits = digits) == round(A,digits = digits))
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == G)
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G,digits = digits) == t(round(A%*%G,digits = digits)))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A,digits = digits) == t(round(G%*%A,digits = digits)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == round(G,digits = digits))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G,digits = digits) == t(round(A%*%G,digits = digits)))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A,digits = digits) == t(round(G%*%A,digits = digits)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
Check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
A = round(A,digits = digits)
G = round(G,digits = digits)
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == round(G,digits = digits))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G == t(round(A%*%G))))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
Check_Penrose_Cond(A,G, all_Penrose_check = T)
check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == round(G,digits = digits))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G == t(round(A%*%G))))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
check_Penrose_Cond(A,G, all_Penrose_check = T)
check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == round(G,digits = digits))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
check_Penrose_Cond(A,G, all_Penrose_check = T)
A <- t(matrix(c(1,2,3, 4,-2,
-1,0,1,4,-7,
7,1,-2,4,1,
1,0,10,2,0,
213,1,8,6,4), nrow = 5))
A
det(A)
adjA = matrix(nrow(A),ncol(A))
adjA
adjA = matrix(nrow = nrow(A))
adjA
adjA = matrix(NA,nrow = nrow(A))
adjA
adjA = matrix(NA,nrow = nrow(A), ncol = ncol(A))
adjA
n = nrow(A)
m = ncol(A)
adjA = matrix(NA,nrow = n, ncol = m)
for (i in 1:n){
for (j in 1:m){
adjA[i,j] = (-1)^(i+j)*det(A[-i,-j])
}
}
adjA
library(plm)
library(RConics)
adjoint(A)
A <- t(matrix(c(1,2,3,4,
1,2,3,4,
1,2,3,4,
1,2,3,4,
1,2,3,4,
-1,0,1,-3,
7,1,-2,-3), nrow = 4))
adjugate <- function(A){
n = nrow(A)
m = ncol(A)
# create emtpy cofactor matrix
C = matrix(NA,nrow = n, ncol = m)
# populate the cofactor matrix
for (i in 1:n){
for (j in 1:m){
adjA[i,j] = (-1)^(i+j)*det(A[-i,-j])
}
}
return()
}
adjugate <- function(A){
n = nrow(A)
m = ncol(A)
# create emtpy cofactor matrix
C = matrix(NA,nrow = n, ncol = m)
# populate the cofactor matrix
for (i in 1:n){
for (j in 1:m){
C[i,j] = (-1)^(i+j)*det(A[-i,-j])
}
}
return(t(C))
}
adjoint(A)
adjugate <- function(A){
n = nrow(A)
m = ncol(A)
if (n != m){
message("Matrix must be square!")
return(NULL)
}
# create emtpy cofactor matrix
C = matrix(NA,nrow = n, ncol = m)
# populate the cofactor matrix
for (i in 1:n){
for (j in 1:m){
C[i,j] = (-1)^(i+j)*det(A[-i,-j])
}
}
return(t(C))
}
adjoint(A)
adjoint(A)
A <- t(matrix(c(1,2,3, 4,-2,
-1,0,1,4,-7,
7,1,-2,4,1,
1,0,10,2,0,
213,1,8,6,4), nrow = 5))
adjugate <- function(A){
n = nrow(A)
m = ncol(A)
if (n != m){
message("Matrix must be square!")
return(NULL)
}
# create emtpy cofactor matrix
C = matrix(NA,nrow = n, ncol = m)
# populate the cofactor matrix
for (i in 1:n){
for (j in 1:m){
C[i,j] = (-1)^(i+j)*det(A[-i,-j])
}
}
return(t(C))
}
adjoint(A)
adjoint(A)
adjugate(A) == adjoint(A)
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
# All idxs in the second col should be lin. dep. with some vecs in the first col
# Hence, removing those entries should guarantee NON-singularity of A
rmIdx <- unique(linDep_Cautchy_Schwartz(A)$j)
# Check whether A is full rank anyways
if (is.null(rmIdx)){
W = A
} else {
# make matrix square
diff_row_col = abs((nrow(A)-length(rmIdx))-ncol(A))
W <- A[-rmIdx, -diff_row_col]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjugate matrix - adjugate() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (is.null(rmIdx)){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[-rmIdx, -diff_row_col] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
check_Penrose_Cond <- function(A,
G,
all_Penrose_check = F,
digits = 2){
message("Disclaimer: All matrices are transformed to pure integer matrices first, so consider that...\n")
if (all_Penrose_check == F){
Penrose_1 = all(round(A%*%G%*%A,2) == A)
message("AGA=A is ", Penrose_1)
return(Penrose_1)
} else{
Penrose_1 = all(round(A%*%G%*%A) == A)
message("AGA = A is ", Penrose_1)
Penrose_2 = all(round(G%*%A%*%G,digits = digits) == round(G,digits = digits))
message("GAG = G is ", Penrose_2)
Penrose_3 = all(round(A%*%G) == t(round(A%*%G)))
message("AG = (AG)' is ", Penrose_3)
Penrose_4 = all(round(G%*%A) == t(round(G%*%A)))
message("GA = (GA)' is ", Penrose_4)
return(all(Penrose_1,Penrose_2,Penrose_3,Penrose_4))
}
}
G <- generalized_Inverse(A)
check_Penrose_Cond(A,G, all_Penrose_check = T)
round(G%*%A%*%G,2) == round(G,2)
