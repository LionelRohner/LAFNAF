return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
# full rank 3x3
A <- t(matrix(c(1,2,3,
-1,0,1,
7,1,-2), nrow = 3))
A%*%MASS::ginv(A)%*%A
A
MASS::ginv(A)
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
# full rank 5x5
A <- t(matrix(c(1,2,3, 4,-2,
-1,0,1,4,-7,
7,1,-2,4,1,
1,0,10,2,0,
213,1,8,6,4), nrow = 5))
MASS::ginv(A)
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
# lin dep rect
A <- t(matrix(c(1,2,3,4,
1,2,3,4,
1,2,3,4,
1,2,3,4,
-1,0,1,-3,
7,1,-2,-3), nrow = 4))
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
# lin dep
A <- t(matrix(c(1,2,3,4,
1,2,3,4,
1,2,3,4,
1,2,3,4),nrow = 4))
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
if (rank == 1){
idxRow = idxCol = 1
}
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else   if (rank == 1){
idxRow = idxCol = 1
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else   if (rank == 1){
W = A[1,1,drop=FALSE]
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else   if (rank == 1){
idxRow = idxCol = 1
W = A[idxRow,idxCol,drop=FALSE]
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
generalized_Inverse(A)
generalized_Inverse(A)
A%*%generalized_Inverse(A)%*%A
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else   if (rank == 1){
idxRow = idxCol = 1
W = A[idxRow,idxCol,drop=FALSE]
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# check assumptions for non-singularity
if (det(W) == 0){
message("Hope that never happens ;)")
return(NULL)
}
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
det(matrix(1))
generalized_Inverse <- function(A){
### step 1 : Find a LIN submatrix of order rxr
message("Step 1 : Find a LIN submatrix W of order rxr in A!")
nc = ncol(A)
nr = nrow(A)
rank = rank_Matrix(A)
# Check whether A is full rank anyways
if (nc == nr && det(A) != 0){
W = A
} else   if (rank == 1){
idxRow = idxCol = 1
W = A[idxRow,idxCol,drop=FALSE]
} else {
# make matrix square
outerBreak = FALSE
for (i in 1:(nr-rank+1)){
for (j in 1:(nc-rank+1)){
print(i:(i+rank-1))
print(j:(j+rank-1))
print(A[i:(i+rank-1),j:(j+rank-1)])
print(det(A[i:(i+rank-1),j:(j+rank-1)]))
if (det(A[i:(i+rank-1),j:(j+rank-1)]) != 0){
idxRow = c(i:(i+rank-1))
idxCol = c(j:(j+rank-1))
outerBreak = TRUE
break
}
if(outerBreak){
break
}
}
}
if (!outerBreak){
message("All submatrices are singular! Generalized Inverse could not be calculated!")
return(NULL)
}
W <- A[idxRow, idxCol]
}
# # check assumptions for non-singularity
# if (det(W) == 0){
#   message("Hope that never happens ;)")
#   return(NULL)
# }
### step 2 : (W^-1)^T
message("Step 2 : (W^-1)^T!")
# create adjoint matrix - adjoint() doesnt work for 2x2
if (dim(W)[1] == 2){
adj_W = -1*W
diag(adj_W) = rev(diag(W))
} else {
adj_W = adjugate(W)
}
transp_inv_W <- t(adj_W/det(W))
### step 3 : replace elements of A with (W^-1)^T
message("Step 3 : Project rows/cols of (W^-1)^T into a a zero matrix A0 of order dim(A)!")
# Again, if A is non-singular from scratch skip Step 3
if (nc == nr && det(A) != 0){
A0 = transp_inv_W
} else{
A0 <- 0*A
A0[idxRow,idxCol] = transp_inv_W
}
### step 4 : t(A)
message("Step 3 : G = A0^T!")
G <- t(A0)
return(G)
}
A%*%MASS::ginv(A)%*%A
A%*%generalized_Inverse(A)%*%A
I = matrix(1,nrow=2,ncol=2)
J = matrix(1,nrow=2,ncol=2)
I = diag(2)
I
(1-10)*I
(1-10)*I %*% 10*J
J
10*J
(1-10)*I
(1-10)*I %*% 10*J
((1-10)*I) %*% (10*J)
((1-10)*I) + (10*J)
matrix(1:10, nrow = 10)
matrix(1:10, nrow = 10, ncol = 10)
t(matrix(1:10, nrow = 10, ncol = 10))
A = t(matrix(1:10, nrow = 10, ncol = 10))
cov(A)
cor(A)
A[1,]
sd(A[1,])
var(A)
A = matrix(1:10, nrow = 10, ncol = 10)
var(A)
cov(A)
cor(A)
cor(A)*cov(A)
var(A[1,])
var(A[,1])
cor(A)*cov(A) == var(A[,1])*cor(A)
